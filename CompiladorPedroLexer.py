# Generated from CompiladorPedro.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,240,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,
        14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,
        17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
        24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
        26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,
        35,1,35,5,35,216,8,35,10,35,12,35,219,9,35,1,36,4,36,222,8,36,11,
        36,12,36,223,1,36,1,36,4,36,228,8,36,11,36,12,36,229,3,36,232,8,
        36,1,37,4,37,235,8,37,11,37,12,37,236,1,37,1,37,0,0,38,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,48,57,3,0,9,10,13,13,32,32,244,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,1,77,1,0,0,0,3,79,1,0,0,0,5,81,1,0,0,0,7,83,1,0,0,0,9,85,1,0,
        0,0,11,87,1,0,0,0,13,89,1,0,0,0,15,91,1,0,0,0,17,93,1,0,0,0,19,95,
        1,0,0,0,21,98,1,0,0,0,23,101,1,0,0,0,25,103,1,0,0,0,27,105,1,0,0,
        0,29,108,1,0,0,0,31,111,1,0,0,0,33,117,1,0,0,0,35,121,1,0,0,0,37,
        125,1,0,0,0,39,131,1,0,0,0,41,138,1,0,0,0,43,144,1,0,0,0,45,151,
        1,0,0,0,47,154,1,0,0,0,49,159,1,0,0,0,51,164,1,0,0,0,53,170,1,0,
        0,0,55,176,1,0,0,0,57,179,1,0,0,0,59,188,1,0,0,0,61,192,1,0,0,0,
        63,195,1,0,0,0,65,202,1,0,0,0,67,206,1,0,0,0,69,209,1,0,0,0,71,213,
        1,0,0,0,73,221,1,0,0,0,75,234,1,0,0,0,77,78,5,44,0,0,78,2,1,0,0,
        0,79,80,5,59,0,0,80,4,1,0,0,0,81,82,5,61,0,0,82,6,1,0,0,0,83,84,
        5,40,0,0,84,8,1,0,0,0,85,86,5,41,0,0,86,10,1,0,0,0,87,88,5,43,0,
        0,88,12,1,0,0,0,89,90,5,45,0,0,90,14,1,0,0,0,91,92,5,42,0,0,92,16,
        1,0,0,0,93,94,5,47,0,0,94,18,1,0,0,0,95,96,5,61,0,0,96,97,5,61,0,
        0,97,20,1,0,0,0,98,99,5,33,0,0,99,100,5,61,0,0,100,22,1,0,0,0,101,
        102,5,60,0,0,102,24,1,0,0,0,103,104,5,62,0,0,104,26,1,0,0,0,105,
        106,5,60,0,0,106,107,5,61,0,0,107,28,1,0,0,0,108,109,5,62,0,0,109,
        110,5,61,0,0,110,30,1,0,0,0,111,112,5,98,0,0,112,113,5,101,0,0,113,
        114,5,103,0,0,114,115,5,105,0,0,115,116,5,110,0,0,116,32,1,0,0,0,
        117,118,5,101,0,0,118,119,5,110,0,0,119,120,5,100,0,0,120,34,1,0,
        0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,124,5,116,0,0,124,36,
        1,0,0,0,125,126,5,102,0,0,126,127,5,108,0,0,127,128,5,111,0,0,128,
        129,5,97,0,0,129,130,5,116,0,0,130,38,1,0,0,0,131,132,5,115,0,0,
        132,133,5,116,0,0,133,134,5,114,0,0,134,135,5,105,0,0,135,136,5,
        110,0,0,136,137,5,103,0,0,137,40,1,0,0,0,138,139,5,105,0,0,139,140,
        5,110,0,0,140,141,5,112,0,0,141,142,5,117,0,0,142,143,5,116,0,0,
        143,42,1,0,0,0,144,145,5,111,0,0,145,146,5,117,0,0,146,147,5,116,
        0,0,147,148,5,112,0,0,148,149,5,117,0,0,149,150,5,116,0,0,150,44,
        1,0,0,0,151,152,5,105,0,0,152,153,5,102,0,0,153,46,1,0,0,0,154,155,
        5,116,0,0,155,156,5,104,0,0,156,157,5,101,0,0,157,158,5,110,0,0,
        158,48,1,0,0,0,159,160,5,101,0,0,160,161,5,108,0,0,161,162,5,115,
        0,0,162,163,5,101,0,0,163,50,1,0,0,0,164,165,5,101,0,0,165,166,5,
        110,0,0,166,167,5,100,0,0,167,168,5,105,0,0,168,169,5,102,0,0,169,
        52,1,0,0,0,170,171,5,119,0,0,171,172,5,104,0,0,172,173,5,105,0,0,
        173,174,5,108,0,0,174,175,5,101,0,0,175,54,1,0,0,0,176,177,5,100,
        0,0,177,178,5,111,0,0,178,56,1,0,0,0,179,180,5,101,0,0,180,181,5,
        110,0,0,181,182,5,100,0,0,182,183,5,119,0,0,183,184,5,104,0,0,184,
        185,5,105,0,0,185,186,5,108,0,0,186,187,5,101,0,0,187,58,1,0,0,0,
        188,189,5,102,0,0,189,190,5,111,0,0,190,191,5,114,0,0,191,60,1,0,
        0,0,192,193,5,116,0,0,193,194,5,111,0,0,194,62,1,0,0,0,195,196,5,
        101,0,0,196,197,5,110,0,0,197,198,5,100,0,0,198,199,5,102,0,0,199,
        200,5,111,0,0,200,201,5,114,0,0,201,64,1,0,0,0,202,203,5,97,0,0,
        203,204,5,110,0,0,204,205,5,100,0,0,205,66,1,0,0,0,206,207,5,111,
        0,0,207,208,5,114,0,0,208,68,1,0,0,0,209,210,5,110,0,0,210,211,5,
        111,0,0,211,212,5,116,0,0,212,70,1,0,0,0,213,217,7,0,0,0,214,216,
        7,1,0,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,
        1,0,0,0,218,72,1,0,0,0,219,217,1,0,0,0,220,222,7,2,0,0,221,220,1,
        0,0,0,222,223,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,231,1,
        0,0,0,225,227,5,46,0,0,226,228,7,2,0,0,227,226,1,0,0,0,228,229,1,
        0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,225,1,
        0,0,0,231,232,1,0,0,0,232,74,1,0,0,0,233,235,7,3,0,0,234,233,1,0,
        0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,238,1,0,
        0,0,238,239,6,37,0,0,239,76,1,0,0,0,6,0,217,223,229,231,236,1,6,
        0,0
    ]

class CompiladorPedroLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    BEGIN = 16
    END = 17
    INT = 18
    FLOAT = 19
    STRING = 20
    INPUT = 21
    OUTPUT = 22
    IF = 23
    THEN = 24
    ELSE = 25
    ENDIF = 26
    WHILE = 27
    DO = 28
    ENDWHILE = 29
    FOR = 30
    TO = 31
    ENDFOR = 32
    AND = 33
    OR = 34
    NOT = 35
    ID = 36
    NUM = 37
    WS = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "';'", "'='", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
            "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'begin'", "'end'", 
            "'int'", "'float'", "'string'", "'input'", "'output'", "'if'", 
            "'then'", "'else'", "'endif'", "'while'", "'do'", "'endwhile'", 
            "'for'", "'to'", "'endfor'", "'and'", "'or'", "'not'" ]

    symbolicNames = [ "<INVALID>",
            "BEGIN", "END", "INT", "FLOAT", "STRING", "INPUT", "OUTPUT", 
            "IF", "THEN", "ELSE", "ENDIF", "WHILE", "DO", "ENDWHILE", "FOR", 
            "TO", "ENDFOR", "AND", "OR", "NOT", "ID", "NUM", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "BEGIN", "END", "INT", "FLOAT", "STRING", "INPUT", 
                  "OUTPUT", "IF", "THEN", "ELSE", "ENDIF", "WHILE", "DO", 
                  "ENDWHILE", "FOR", "TO", "ENDFOR", "AND", "OR", "NOT", 
                  "ID", "NUM", "WS" ]

    grammarFileName = "CompiladorPedro.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


